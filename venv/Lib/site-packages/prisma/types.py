# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _int
    name: Optional[_str]
    is_admin: _bool
    created_at: datetime.datetime
    products: 'ProductCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _int
    name: Optional[_str]
    is_admin: _bool
    created_at: datetime.datetime


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    password: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    email: _str
    password: _str
    name: Optional[_str]
    is_admin: _bool
    created_at: datetime.datetime
    products: 'ProductUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    email: _str
    password: _str
    name: Optional[_str]
    is_admin: _bool
    created_at: datetime.datetime


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_is_admin_OrderByInput = TypedDict(
    '_User_is_admin_OrderByInput',
    {
        'is_admin': 'SortOrder',
    },
    total=True
)

_User_created_at_OrderByInput = TypedDict(
    '_User_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_password_OrderByInput',
    '_User_name_OrderByInput',
    '_User_is_admin_OrderByInput',
    '_User_created_at_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    products: Union[bool, 'FindManyProductArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    products: Union[bool, 'FindManyProductArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    products: Union[bool, 'FindManyProductArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    products: Union[bool, 'FindManyProductArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    products: Union[bool, 'FindManyProductArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class CategoryIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    products: Union[bool, 'FindManyProductArgsFromUserRecursive1']


class CategoryIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    products: Union[bool, 'FindManyProductArgsFromUserRecursive2']


class CategoryIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    products: Union[bool, 'FindManyProductArgsFromUserRecursive3']


class CategoryIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    products: Union[bool, 'FindManyProductArgsFromUserRecursive4']


class CategoryIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class ProductIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    category: Union[bool, 'CategoryArgsFromUserRecursive1']


class ProductIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    category: Union[bool, 'CategoryArgsFromUserRecursive2']


class ProductIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    category: Union[bool, 'CategoryArgsFromUserRecursive3']


class ProductIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    category: Union[bool, 'CategoryArgsFromUserRecursive4']


class ProductIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ProductArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyProductArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    is_admin: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    is_admin: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    is_admin: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    is_admin: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    is_admin: Union[_bool, 'types.BooleanFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    products: 'ProductListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    is_admin: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    is_admin: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    is_admin: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    is_admin: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    is_admin: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _int
    email: _str
    password: _str
    name: _str
    is_admin: _bool
    created_at: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    id: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    id: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _int
    email: _str
    password: _str
    name: _str
    is_admin: _bool
    created_at: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    password: bool
    name: bool
    is_admin: bool
    created_at: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    password: bool
    name: bool
    is_admin: bool
    created_at: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    id: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'password': bool,
        'name': bool,
        'is_admin': bool,
        'created_at': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'password': int,
        'name': int,
        'is_admin': int,
        'created_at': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'password',
    'name',
    'is_admin',
    'created_at',
    'products',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'password',
    'name',
    'is_admin',
    'created_at',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'products',
    ]

# Category types

class CategoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Category create method"""
    id: _int
    products: 'ProductCreateManyNestedWithoutRelationsInput'


class CategoryCreateInput(CategoryOptionalCreateInput):
    """Required arguments to the Category create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CategoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Category create method, without relations"""
    id: _int


class CategoryCreateWithoutRelationsInput(CategoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the Category create method, without relations"""
    name: _str

class CategoryConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CategoryCreateWithoutRelationsInput'
    where: 'CategoryWhereUniqueInput'

class CategoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryCreateWithoutRelationsInput'
    connect: 'CategoryWhereUniqueInput'
    connect_or_create: 'CategoryConnectOrCreateWithoutRelationsInput'


class CategoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CategoryCreateWithoutRelationsInput', List['CategoryCreateWithoutRelationsInput']]
    connect: Union['CategoryWhereUniqueInput', List['CategoryWhereUniqueInput']]
    connect_or_create: Union['CategoryConnectOrCreateWithoutRelationsInput', List['CategoryConnectOrCreateWithoutRelationsInput']]

_CategoryWhereUnique_id_Input = TypedDict(
    '_CategoryWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_CategoryWhereUnique_name_Input = TypedDict(
    '_CategoryWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

CategoryWhereUniqueInput = Union[
    '_CategoryWhereUnique_id_Input',
    '_CategoryWhereUnique_name_Input',
]


class CategoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    products: 'ProductUpdateManyWithoutRelationsInput'


class CategoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str


class CategoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CategoryCreateWithoutRelationsInput']
    connect: List['CategoryWhereUniqueInput']
    connect_or_create: List['CategoryConnectOrCreateWithoutRelationsInput']
    set: List['CategoryWhereUniqueInput']
    disconnect: List['CategoryWhereUniqueInput']
    delete: List['CategoryWhereUniqueInput']

    # TODO
    # update: List['CategoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CategoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CategoryScalarWhereInput']
    # upsert: List['CategoryUpserteWithWhereUniqueWithoutRelationsInput']


class CategoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryCreateWithoutRelationsInput'
    connect: 'CategoryWhereUniqueInput'
    connect_or_create: 'CategoryConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CategoryUpdateInput'
    # upsert: 'CategoryUpsertWithoutRelationsInput'


class CategoryUpsertInput(TypedDict):
    create: 'CategoryCreateInput'
    update: 'CategoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Category_id_OrderByInput = TypedDict(
    '_Category_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Category_name_OrderByInput = TypedDict(
    '_Category_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Category_RelevanceInner = TypedDict(
    '_Category_RelevanceInner',
    {
        'fields': 'List[CategoryScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Category_RelevanceOrderByInput = TypedDict(
    '_Category_RelevanceOrderByInput',
    {
        '_relevance': '_Category_RelevanceInner',
    },
    total=True
)

CategoryOrderByInput = Union[
    '_Category_id_OrderByInput',
    '_Category_name_OrderByInput',
    '_Category_RelevanceOrderByInput',
]



# recursive Category types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CategoryRelationFilter = TypedDict(
    'CategoryRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CategoryListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CategoryInclude(TypedDict, total=False):
    """Category relational arguments"""
    products: Union[bool, 'FindManyProductArgsFromCategory']


    

class UserIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategoryRecursive1']


class UserIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategoryRecursive2']


class UserIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategoryRecursive3']


class UserIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategoryRecursive4']


class UserIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class UserArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyUserArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class CategoryIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategoryRecursive1']


class CategoryIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategoryRecursive2']


class CategoryIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategoryRecursive3']


class CategoryIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategoryRecursive4']


class CategoryIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class CategoryArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyCategoryArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class ProductIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UserArgsFromCategoryRecursive1']
    category: Union[bool, 'CategoryArgsFromCategoryRecursive1']


class ProductIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UserArgsFromCategoryRecursive2']
    category: Union[bool, 'CategoryArgsFromCategoryRecursive2']


class ProductIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UserArgsFromCategoryRecursive3']
    category: Union[bool, 'CategoryArgsFromCategoryRecursive3']


class ProductIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UserArgsFromCategoryRecursive4']
    category: Union[bool, 'CategoryArgsFromCategoryRecursive4']


class ProductIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class ProductArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyProductArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    


FindManyCategoryArgs = FindManyCategoryArgsFromCategory
FindFirstCategoryArgs = FindManyCategoryArgsFromCategory


    

class CategoryWhereInput(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive1', List['CategoryWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive1']
    OR: List['CategoryWhereInputRecursive1']
    NOT: List['CategoryWhereInputRecursive1']


class CategoryWhereInputRecursive1(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive2', List['CategoryWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive2']
    OR: List['CategoryWhereInputRecursive2']
    NOT: List['CategoryWhereInputRecursive2']


class CategoryWhereInputRecursive2(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive3', List['CategoryWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive3']
    OR: List['CategoryWhereInputRecursive3']
    NOT: List['CategoryWhereInputRecursive3']


class CategoryWhereInputRecursive3(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive4', List['CategoryWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive4']
    OR: List['CategoryWhereInputRecursive4']
    NOT: List['CategoryWhereInputRecursive4']


class CategoryWhereInputRecursive4(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    products: 'ProductListRelationFilter'



# aggregate Category types


    

class CategoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive1']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive1']


class CategoryScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive2']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive2']


class CategoryScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive3']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive3']


class CategoryScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive4']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive4']


class CategoryScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class CategoryGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    _sum: 'CategorySumAggregateOutput'
    _avg: 'CategoryAvgAggregateOutput'
    _min: 'CategoryMinAggregateOutput'
    _max: 'CategoryMaxAggregateOutput'
    _count: 'CategoryCountAggregateOutput'


class CategoryAvgAggregateOutput(TypedDict, total=False):
    """Category output for aggregating averages"""
    id: float


class CategorySumAggregateOutput(TypedDict, total=False):
    """Category output for aggregating sums"""
    id: _int


class CategoryScalarAggregateOutput(TypedDict, total=False):
    """Category output including scalar fields"""
    id: _int
    name: _str


CategoryMinAggregateOutput = CategoryScalarAggregateOutput
CategoryMaxAggregateOutput = CategoryScalarAggregateOutput


class CategoryMaxAggregateInput(TypedDict, total=False):
    """Category input for aggregating by max"""
    id: bool
    name: bool


class CategoryMinAggregateInput(TypedDict, total=False):
    """Category input for aggregating by min"""
    id: bool
    name: bool


class CategoryNumberAggregateInput(TypedDict, total=False):
    """Category input for aggregating numbers"""
    id: bool


CategoryAvgAggregateInput = CategoryNumberAggregateInput
CategorySumAggregateInput = CategoryNumberAggregateInput


CategoryCountAggregateInput = TypedDict(
    'CategoryCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

CategoryCountAggregateOutput = TypedDict(
    'CategoryCountAggregateOutput',
    {
        'id': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


CategoryKeys = Literal[
    'id',
    'name',
    'products',
]
CategoryScalarFieldKeys = Literal[
    'id',
    'name',
]
CategoryScalarFieldKeysT = TypeVar('CategoryScalarFieldKeysT', bound=CategoryScalarFieldKeys)

CategoryRelationalFieldKeys = Literal[
        'products',
    ]

# Product types

class ProductOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Product create method"""
    id: _int
    description: Optional[_str]
    original_price: _float
    new_price: Optional[_float]
    expairy_date: Optional[datetime.datetime]
    created_at: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'
    category: 'CategoryCreateNestedWithoutRelationsInput'
    user_id: Optional[_int]
    category_id: Optional[_int]


class ProductCreateInput(ProductOptionalCreateInput):
    """Required arguments to the Product create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProductOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Product create method, without relations"""
    id: _int
    description: Optional[_str]
    original_price: _float
    new_price: Optional[_float]
    expairy_date: Optional[datetime.datetime]
    created_at: datetime.datetime
    user_id: Optional[_int]
    category_id: Optional[_int]


class ProductCreateWithoutRelationsInput(ProductOptionalCreateWithoutRelationsInput):
    """Required arguments to the Product create method, without relations"""
    name: _str

class ProductConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ProductCreateWithoutRelationsInput'
    where: 'ProductWhereUniqueInput'

class ProductCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProductCreateWithoutRelationsInput'
    connect: 'ProductWhereUniqueInput'
    connect_or_create: 'ProductConnectOrCreateWithoutRelationsInput'


class ProductCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProductCreateWithoutRelationsInput', List['ProductCreateWithoutRelationsInput']]
    connect: Union['ProductWhereUniqueInput', List['ProductWhereUniqueInput']]
    connect_or_create: Union['ProductConnectOrCreateWithoutRelationsInput', List['ProductConnectOrCreateWithoutRelationsInput']]

_ProductWhereUnique_id_Input = TypedDict(
    '_ProductWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_ProductWhereUnique_name_Input = TypedDict(
    '_ProductWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

ProductWhereUniqueInput = Union[
    '_ProductWhereUnique_id_Input',
    '_ProductWhereUnique_name_Input',
]


class ProductUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: Optional[_str]
    original_price: Union[AtomicFloatInput, _float]
    new_price: Optional[Union[AtomicFloatInput, _float]]
    expairy_date: Optional[datetime.datetime]
    created_at: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    category: 'CategoryUpdateOneWithoutRelationsInput'


class ProductUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: Optional[_str]
    original_price: Union[AtomicFloatInput, _float]
    new_price: Optional[Union[AtomicFloatInput, _float]]
    expairy_date: Optional[datetime.datetime]
    created_at: datetime.datetime


class ProductUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProductCreateWithoutRelationsInput']
    connect: List['ProductWhereUniqueInput']
    connect_or_create: List['ProductConnectOrCreateWithoutRelationsInput']
    set: List['ProductWhereUniqueInput']
    disconnect: List['ProductWhereUniqueInput']
    delete: List['ProductWhereUniqueInput']

    # TODO
    # update: List['ProductUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProductUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProductScalarWhereInput']
    # upsert: List['ProductUpserteWithWhereUniqueWithoutRelationsInput']


class ProductUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProductCreateWithoutRelationsInput'
    connect: 'ProductWhereUniqueInput'
    connect_or_create: 'ProductConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProductUpdateInput'
    # upsert: 'ProductUpsertWithoutRelationsInput'


class ProductUpsertInput(TypedDict):
    create: 'ProductCreateInput'
    update: 'ProductUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Product_id_OrderByInput = TypedDict(
    '_Product_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Product_name_OrderByInput = TypedDict(
    '_Product_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Product_description_OrderByInput = TypedDict(
    '_Product_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Product_original_price_OrderByInput = TypedDict(
    '_Product_original_price_OrderByInput',
    {
        'original_price': 'SortOrder',
    },
    total=True
)

_Product_new_price_OrderByInput = TypedDict(
    '_Product_new_price_OrderByInput',
    {
        'new_price': 'SortOrder',
    },
    total=True
)

_Product_expairy_date_OrderByInput = TypedDict(
    '_Product_expairy_date_OrderByInput',
    {
        'expairy_date': 'SortOrder',
    },
    total=True
)

_Product_created_at_OrderByInput = TypedDict(
    '_Product_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Product_user_id_OrderByInput = TypedDict(
    '_Product_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_Product_category_id_OrderByInput = TypedDict(
    '_Product_category_id_OrderByInput',
    {
        'category_id': 'SortOrder',
    },
    total=True
)

_Product_RelevanceInner = TypedDict(
    '_Product_RelevanceInner',
    {
        'fields': 'List[ProductScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Product_RelevanceOrderByInput = TypedDict(
    '_Product_RelevanceOrderByInput',
    {
        '_relevance': '_Product_RelevanceInner',
    },
    total=True
)

ProductOrderByInput = Union[
    '_Product_id_OrderByInput',
    '_Product_name_OrderByInput',
    '_Product_description_OrderByInput',
    '_Product_original_price_OrderByInput',
    '_Product_new_price_OrderByInput',
    '_Product_expairy_date_OrderByInput',
    '_Product_created_at_OrderByInput',
    '_Product_user_id_OrderByInput',
    '_Product_category_id_OrderByInput',
    '_Product_RelevanceOrderByInput',
]



# recursive Product types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ProductRelationFilter = TypedDict(
    'ProductRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProductListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProductInclude(TypedDict, total=False):
    """Product relational arguments"""
    user: Union[bool, 'UserArgsFromProduct']
    category: Union[bool, 'CategoryArgsFromProduct']


    

class UserIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProductRecursive1']


class UserIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProductRecursive2']


class UserIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProductRecursive3']


class UserIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProductRecursive4']


class UserIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class UserArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyUserArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class CategoryIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProductRecursive1']


class CategoryIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProductRecursive2']


class CategoryIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProductRecursive3']


class CategoryIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProductRecursive4']


class CategoryIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class CategoryArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyCategoryArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class ProductIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    user: Union[bool, 'UserArgsFromProductRecursive1']
    category: Union[bool, 'CategoryArgsFromProductRecursive1']


class ProductIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    user: Union[bool, 'UserArgsFromProductRecursive2']
    category: Union[bool, 'CategoryArgsFromProductRecursive2']


class ProductIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    user: Union[bool, 'UserArgsFromProductRecursive3']
    category: Union[bool, 'CategoryArgsFromProductRecursive3']


class ProductIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    user: Union[bool, 'UserArgsFromProductRecursive4']
    category: Union[bool, 'CategoryArgsFromProductRecursive4']


class ProductIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class ProductArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyProductArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    


FindManyProductArgs = FindManyProductArgsFromProduct
FindFirstProductArgs = FindManyProductArgsFromProduct


    

class ProductWhereInput(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    original_price: Union[_float, 'types.FloatFilter']
    new_price: Union[None, _float, 'types.FloatFilter']
    expairy_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    category: 'CategoryRelationFilter'
    user_id: Union[None, _int, 'types.IntFilter']
    category_id: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive1', List['ProductWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive1']
    OR: List['ProductWhereInputRecursive1']
    NOT: List['ProductWhereInputRecursive1']


class ProductWhereInputRecursive1(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    original_price: Union[_float, 'types.FloatFilter']
    new_price: Union[None, _float, 'types.FloatFilter']
    expairy_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    category: 'CategoryRelationFilter'
    user_id: Union[None, _int, 'types.IntFilter']
    category_id: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive2', List['ProductWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive2']
    OR: List['ProductWhereInputRecursive2']
    NOT: List['ProductWhereInputRecursive2']


class ProductWhereInputRecursive2(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    original_price: Union[_float, 'types.FloatFilter']
    new_price: Union[None, _float, 'types.FloatFilter']
    expairy_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    category: 'CategoryRelationFilter'
    user_id: Union[None, _int, 'types.IntFilter']
    category_id: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive3', List['ProductWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive3']
    OR: List['ProductWhereInputRecursive3']
    NOT: List['ProductWhereInputRecursive3']


class ProductWhereInputRecursive3(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    original_price: Union[_float, 'types.FloatFilter']
    new_price: Union[None, _float, 'types.FloatFilter']
    expairy_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    category: 'CategoryRelationFilter'
    user_id: Union[None, _int, 'types.IntFilter']
    category_id: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive4', List['ProductWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive4']
    OR: List['ProductWhereInputRecursive4']
    NOT: List['ProductWhereInputRecursive4']


class ProductWhereInputRecursive4(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    original_price: Union[_float, 'types.FloatFilter']
    new_price: Union[None, _float, 'types.FloatFilter']
    expairy_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    category: 'CategoryRelationFilter'
    user_id: Union[None, _int, 'types.IntFilter']
    category_id: Union[None, _int, 'types.IntFilter']



# aggregate Product types


    

class ProductScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    original_price: Union[_float, 'types.FloatWithAggregatesFilter']
    new_price: Union[_float, 'types.FloatWithAggregatesFilter']
    expairy_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive1']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive1']


class ProductScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    original_price: Union[_float, 'types.FloatWithAggregatesFilter']
    new_price: Union[_float, 'types.FloatWithAggregatesFilter']
    expairy_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive2']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive2']


class ProductScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    original_price: Union[_float, 'types.FloatWithAggregatesFilter']
    new_price: Union[_float, 'types.FloatWithAggregatesFilter']
    expairy_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive3']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive3']


class ProductScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    original_price: Union[_float, 'types.FloatWithAggregatesFilter']
    new_price: Union[_float, 'types.FloatWithAggregatesFilter']
    expairy_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive4']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive4']


class ProductScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    original_price: Union[_float, 'types.FloatWithAggregatesFilter']
    new_price: Union[_float, 'types.FloatWithAggregatesFilter']
    expairy_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']



class ProductGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    description: _str
    original_price: _float
    new_price: _float
    expairy_date: datetime.datetime
    created_at: datetime.datetime
    user_id: _int
    category_id: _int
    _sum: 'ProductSumAggregateOutput'
    _avg: 'ProductAvgAggregateOutput'
    _min: 'ProductMinAggregateOutput'
    _max: 'ProductMaxAggregateOutput'
    _count: 'ProductCountAggregateOutput'


class ProductAvgAggregateOutput(TypedDict, total=False):
    """Product output for aggregating averages"""
    id: float
    original_price: float
    new_price: float
    user_id: float
    category_id: float


class ProductSumAggregateOutput(TypedDict, total=False):
    """Product output for aggregating sums"""
    id: _int
    original_price: _float
    new_price: _float
    user_id: _int
    category_id: _int


class ProductScalarAggregateOutput(TypedDict, total=False):
    """Product output including scalar fields"""
    id: _int
    name: _str
    description: _str
    original_price: _float
    new_price: _float
    expairy_date: datetime.datetime
    created_at: datetime.datetime
    user_id: _int
    category_id: _int


ProductMinAggregateOutput = ProductScalarAggregateOutput
ProductMaxAggregateOutput = ProductScalarAggregateOutput


class ProductMaxAggregateInput(TypedDict, total=False):
    """Product input for aggregating by max"""
    id: bool
    name: bool
    description: bool
    original_price: bool
    new_price: bool
    expairy_date: bool
    created_at: bool
    user_id: bool
    category_id: bool


class ProductMinAggregateInput(TypedDict, total=False):
    """Product input for aggregating by min"""
    id: bool
    name: bool
    description: bool
    original_price: bool
    new_price: bool
    expairy_date: bool
    created_at: bool
    user_id: bool
    category_id: bool


class ProductNumberAggregateInput(TypedDict, total=False):
    """Product input for aggregating numbers"""
    id: bool
    original_price: bool
    new_price: bool
    user_id: bool
    category_id: bool


ProductAvgAggregateInput = ProductNumberAggregateInput
ProductSumAggregateInput = ProductNumberAggregateInput


ProductCountAggregateInput = TypedDict(
    'ProductCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        'original_price': bool,
        'new_price': bool,
        'expairy_date': bool,
        'created_at': bool,
        'user_id': bool,
        'category_id': bool,
        '_all': bool,
    },
    total=False,
)

ProductCountAggregateOutput = TypedDict(
    'ProductCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        'original_price': int,
        'new_price': int,
        'expairy_date': int,
        'created_at': int,
        'user_id': int,
        'category_id': int,
        '_all': int,
    },
    total=False,
)


ProductKeys = Literal[
    'id',
    'name',
    'description',
    'original_price',
    'new_price',
    'expairy_date',
    'created_at',
    'user',
    'category',
    'user_id',
    'category_id',
]
ProductScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
    'original_price',
    'new_price',
    'expairy_date',
    'created_at',
    'user_id',
    'category_id',
]
ProductScalarFieldKeysT = TypeVar('ProductScalarFieldKeysT', bound=ProductScalarFieldKeys)

ProductRelationalFieldKeys = Literal[
        'user',
        'category',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields